const sequelize = require('../config/db-connect');
const Course = require('../model/course');
const Student = require('../model/student');
const Enrollment = require('../model/Enrollment');


const createBook = async (req, res) => {
  const { name, title} = req.body;
  try {
    // const newBook = await Book.create({ title, author });
    // const BookDetails = await Bookdetails.create({ title, genere });
    // const AutherDetails = await Author.create({ name: author, place });
    const student = await Student.create({name});
    const course = await Course.create({title});
    await student.addCourse(course);
    res.status(201).json(student);

  } catch (error) {
    console.error('Error creating book:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

const getAllBooks = async (req, res) => {
  try {
    const student = await Student.findAll({
      include: [
        {
          model: Course,
          attributes: ['title']
        }
      ]
    });
    res.json(student);
  } catch (error) {
    console.error('Error fetching books:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

const updateBook = async (req, res) => {
  const studentId = req.params.id;
  const { name, title} = req.body;
  try {
    const student = await Student.findByPk(studentId, {
      include: [
        {
          model: Course,
          attributes: ['title']

        }
      ]
    });
    if (!student) {
      return res.status(404).json({ message: 'student not found' });
    }
    if (name != null) {
      student.name = name;
    }
    if (title != null) {
      student.title = title;
    }
    await student.update(student, {
      where: {
      studentId: Course.id
      }
      });
    console.log("student----------------------------", student)
    res.json(student);
  } catch (error) {
    console.error('Error updating book:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

const deleteBook = async (req, res) => {
  const studentId = req.params.id;

  try {
    const student = await Student.findByPk(studentId, {
      include: [
        {
          model: Course,
          attributes: ['title']
        }
      ]
    });

    if (!student) {
      return res.status(404).json({ message: 'student not found' });
    }

    await student.destroy(studentId, {
      where: {
        studentId: Course.id
      }
    });
    res.json({ message: 'student deleted successfully' });
  } catch (error) {
    console.error('Error deleting student:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};
module.exports = { createBook, getAllBooks, updateBook, deleteBook };
